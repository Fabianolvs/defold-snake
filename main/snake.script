function put_food(self)
	self.food = {x = math.random(2, 47), y = math.random(2, 46)}

	local tile = tilemap.get_tile("#grid", "layer1", self.food.x, self.food.y)

	if tile == 2 or tile == 4 then
		put_food(self)
	else
		tilemap.set_tile("#grid", "layer1", self.food.x, self.food.y, 3)
	end
end

function init(self)
	msg.post(".", "acquire_input_focus")
	
	self.segments = {
		{x = 7, y = 30},
		{x = 8, y = 30},
		{x = 9, y = 30},
		{x = 10, y = 30} 
	} -- <1>

	self.dir = {x = 1, y = 0} -- <2>
	self.dirQueue = {}
	self.alive = true
	self.speed = 7.0 -- <3>

	self.t = 0 -- <4>

	math.randomseed(socket.gettime())
	put_food(self)
end

function update(self, dt)
	self.t = self.t + dt -- <1>
	if self.t >= 1.0 / self.speed then -- <2>
		local newDir = table.remove(self.dirQueue, 1)

		if newDir then
			local oposite = newDir.x == -self.dir.x or newDir.y == -self.dir.y

			if not oposite then
				self.dir = newDir
			end
		end
		
		local head = self.segments[#self.segments] -- <3>
		local newHead = {x = head.x + self.dir.x, y = head.y + self.dir.y} -- <4>

		table.insert(self.segments, newHead) -- <5>

		local tile = tilemap.get_tile("#grid", "layer1", newHead.x, newHead.y)

		if tile == 2 or tile == 4 then
			msg.post("@system:", "exit", {code = 0})
		elseif tile == 3 then
			self.speed = self.speed + 1
			put_food(self)
		else
			local tail = table.remove(self.segments, 1) -- <6>
			tilemap.set_tile("#grid", "layer1", tail.x, tail.y, 0) -- <7>
		end
			
		for i, s in ipairs(self.segments) do -- <8>
			tilemap.set_tile("#grid", "layer1", s.x, s.y, 2) -- <9>
		end

		self.t = 0 -- <10>
	end
end

function on_input(self, action_id, action)
	if action_id == hash("up") and action.pressed then
		table.insert(self.dirQueue, {x = 0, y = 1})
	elseif action_id == hash("down") and action.pressed then
		table.insert(self.dirQueue, {x = 0, y = -1})
	elseif action_id == hash("left") and action.pressed then
		table.insert(self.dirQueue, {x = -1, y = 0})
	elseif action_id == hash("right") and action.pressed then
		table.insert(self.dirQueue, {x = 1, y = 0})
	end
end